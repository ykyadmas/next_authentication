// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String     @id @default(cuid())
  firstName       String
  lastName        String
  email           String     @unique
  password        String
  confirmPassword String
  emailVerified   DateTime?
  role            Role       @default(USER)
  image           String?
  proposals       Proposal[]
  accounts        Account[]
  sessions        Session[]
  messages        Message[]
  engineerSurveys EngineerSurvey[]
  Payments        Payment[] 
  claimForms       ClaimForm[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Proposal {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String
  woreda    String
  kebele    String
  phoneNo   String

  occupation String
  startDate  String
  endDate    String

  model                  String
  proposedDate           String
  branch                 String
  comprehensive          Boolean          @default(false)
  thirdParty             Boolean          @default(false)
  thirdPartyFireAndTheft Boolean          @default(false)
  ondamage               Boolean          @default(false)
  // status                 Status           @default(IN_PROGRESS)
  createdAt              DateTime         @default(now())
  user                   User             @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail              String     
  engineers              EngineerSurvey?
  payments               Payment?
}

// enum Status {
//   APPROVED
//   IN_PROGRESS
//   CANCELLED
// }

enum Role {
  USER
  ADMIN
  CLAIMADJUSTER
  INSURANCEOFFICER
}

model Message {
  id          Int      @id @default(autoincrement())
  subject     String
  sentMessage String
  user        User?     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail   String?   
  createdAt   DateTime @default(now())
}

model EngineerSurvey {
  id         Int      @id @default(autoincrement())
  firstName  String
  lastName   String
  message    String
  payments   String
  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId Int  @unique    
  user   User @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String    
}
model Payment {
  id         Int      @id @default(autoincrement())
  firstName  String
  lastName   String
  amount     String
  receipt    String
  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId Int  @unique    
  user   User @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String 
  claimForm   ClaimForm[]
}
model ClaimForm {
  id         Int      @id @default(autoincrement())
  driverFullName  String
  driverAddress    String
  driverOccupation   String
  place   String
  age      String
  LicenceNo String
  policyFile String
  carFile String
  acidentDate String
  time          String
  Payment            Payment @relation(fields: [PaymentId], references: [id], onDelete: Cascade)
  PaymentId Int  @unique    
  user   User @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String 
}
